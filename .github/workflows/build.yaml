name: Release Builds

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux, windows, darwin, android]
        arch: [amd64, arm64, arm, 386]
        exclude:
          - os: darwin
            arch: arm
          - os: darwin
            arch: 386
          - os: windows
            arch: arm
          - os: android
            arch: 386
          - os: android
            arch: amd64
        include:
          - os: windows
            ext: .exe
          - os: linux
            ext: ""
          - os: darwin
            ext: ""
          - os: android
            ext: ""
    env:
      CGO_ENABLED: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Android NDK
        if: ${{ matrix.os == 'android' }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r21e # 使用一个稳定的NDK版本

      - name: Build
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          output_name=samloadGo-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}

          if [ "${{ matrix.os }}" = "android" ]; then
            export CGO_ENABLED=1
            export ANDROID_API=21 # 或者其他合适的API级别
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_API}-clang
              export CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_API}-clang++
            elif [ "${{ matrix.arch }}" = "arm" ]; then
              export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_API}-clang
              export CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_API}-clang++
            fi
          fi

          go build -o $output_name main.go

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          path: samloadGo-*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Get tag
        id: get_tag
        run: |
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: List dist contents
        run: ls -l ./dist/release-binaries-*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false
          files: ./dist/release-binaries-*/*
          token: ${{ secrets.GETHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GETHUB_TOKEN }}
